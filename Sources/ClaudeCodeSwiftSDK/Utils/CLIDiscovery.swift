// This file was generated by Claude

import Foundation

/// Utility for discovering the Claude Code CLI executable
public enum CLIDiscovery {
    
    /// Default CLI command name
    public static let defaultCLICommand = "claude"
    
    /// Environment variable for custom CLI path
    public static let cliPathEnvironmentVariable = "CLAUDE_CODE_CLI_PATH"
    
    /// Discovers the Claude Code CLI executable path
    /// - Returns: The URL to the CLI executable
    /// - Throws: `ClaudeSDKError.cliNotFound` if the CLI cannot be found
    public static func discoverCLI() throws -> URL {
        var searchedPaths: [URL] = []
        
        // 1. Check environment variable first
        if let envPath = ProcessInfo.processInfo.environment[cliPathEnvironmentVariable] {
            let url = URL(fileURLWithPath: envPath)
            searchedPaths.append(url)
            if isExecutable(at: url) {
                return url
            }
        }
        
        // 2. Check if 'claude' is in PATH
        if let pathResult = findInPath(command: defaultCLICommand) {
            return pathResult
        }
        
        // 3. Check common installation locations
        let commonPaths = getCommonCLIPaths()
        searchedPaths.append(contentsOf: commonPaths)
        
        for path in commonPaths {
            if isExecutable(at: path) {
                return path
            }
        }
        
        // 4. If not found, throw error with all searched paths
        throw ClaudeSDKError.cliNotFound(searchedPaths: searchedPaths)
    }
    
    /// Get common installation paths for the CLI
    private static func getCommonCLIPaths() -> [URL] {
        let fileManager = FileManager.default
        let homeDirectory = fileManager.homeDirectoryForCurrentUser
        
        var paths: [URL] = []
        
        // npm global installations
        paths.append(homeDirectory.appendingPathComponent(".npm-global/bin/claude"))
        paths.append(URL(fileURLWithPath: "/usr/local/bin/claude"))
        
        // User local installations
        paths.append(homeDirectory.appendingPathComponent(".local/bin/claude"))
        paths.append(homeDirectory.appendingPathComponent("bin/claude"))
        
        // Node modules installations
        paths.append(homeDirectory.appendingPathComponent("node_modules/.bin/claude"))
        paths.append(URL(fileURLWithPath: "/opt/homebrew/bin/claude"))
        
        // Windows paths (if running on Windows via Swift on Windows)
        #if os(Windows)
        if let programFiles = ProcessInfo.processInfo.environment["ProgramFiles"] {
            paths.append(URL(fileURLWithPath: "\(programFiles)\\claude-code\\claude.exe"))
        }
        if let appData = ProcessInfo.processInfo.environment["APPDATA"] {
            paths.append(URL(fileURLWithPath: "\(appData)\\npm\\claude.cmd"))
        }
        #endif
        
        return paths
    }
    
    /// Find a command in the system PATH
    private static func findInPath(command: String) -> URL? {
        let process = Process()
        process.executableURL = URL(fileURLWithPath: "/usr/bin/which")
        process.arguments = [command]
        
        let pipe = Pipe()
        process.standardOutput = pipe
        process.standardError = Pipe() // Suppress errors
        
        do {
            try process.run()
            process.waitUntilExit()
            
            if process.terminationStatus == 0 {
                let data = pipe.fileHandleForReading.readDataToEndOfFile()
                if let path = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines),
                   !path.isEmpty {
                    return URL(fileURLWithPath: path)
                }
            }
        } catch {
            // which command failed, continue with other methods
        }
        
        return nil
    }
    
    /// Check if a file at the given URL is executable
    private static func isExecutable(at url: URL) -> Bool {
        let fileManager = FileManager.default
        
        // Check if file exists
        guard fileManager.fileExists(atPath: url.path) else {
            return false
        }
        
        // Check if it's executable
        return fileManager.isExecutableFile(atPath: url.path)
    }
    
    /// Validate that the CLI at the given path is the correct Claude Code CLI
    /// - Parameter url: The URL to validate
    /// - Returns: true if this appears to be a valid Claude Code CLI
    public static func validateCLI(at url: URL) -> Bool {
        let process = Process()
        process.executableURL = url
        process.arguments = ["--version"]
        
        let pipe = Pipe()
        process.standardOutput = pipe
        process.standardError = Pipe()
        
        do {
            try process.run()
            process.waitUntilExit()
            
            if process.terminationStatus == 0 {
                let data = pipe.fileHandleForReading.readDataToEndOfFile()
                if let output = String(data: data, encoding: .utf8),
                   output.lowercased().contains("claude") {
                    return true
                }
            }
        } catch {
            // Process failed to run
        }
        
        return false
    }
}