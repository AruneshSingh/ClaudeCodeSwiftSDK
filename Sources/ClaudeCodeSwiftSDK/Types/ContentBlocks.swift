// This file was generated by Claude

import Foundation

// MARK: - ContentBlock Protocol

/// Protocol for all content block types
public protocol ContentBlock: Codable, Sendable {}

// MARK: - Text Block

/// A text content block
public struct TextBlock: ContentBlock {
    public let text: String
    
    public init(text: String) {
        self.text = text
    }
}

// MARK: - Tool Use Block

/// A tool use content block representing a tool invocation
public struct ToolUseBlock: ContentBlock {
    public let id: String
    public let name: String
    public let input: [String: AnyCodable]
    
    public init(id: String, name: String, input: [String: AnyCodable]) {
        self.id = id
        self.name = name
        self.input = input
    }
}

// MARK: - Thinking Block

/// A thinking content block representing Claude's internal reasoning
public struct ThinkingBlock: ContentBlock {
    public let thinking: String
    public let signature: String
    
    public init(thinking: String, signature: String) {
        self.thinking = thinking
        self.signature = signature
    }
}

// MARK: - Tool Result Block

/// A tool result content block containing the result of a tool invocation
public struct ToolResultBlock: ContentBlock {
    public let toolUseId: String
    public let content: ContentResult?
    public let isError: Bool?
    
    public enum ContentResult: Codable, Sendable {
        case text(String)
        case structured([String: AnyCodable])
        
        private enum CodingKeys: String, CodingKey {
            case type
            case value
        }
        
        public init(from decoder: any Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            
            switch type {
            case "text":
                let value = try container.decode(String.self, forKey: .value)
                self = .text(value)
            case "structured":
                let value = try container.decode([String: AnyCodable].self, forKey: .value)
                self = .structured(value)
            default:
                throw DecodingError.dataCorruptedError(
                    forKey: .type,
                    in: container,
                    debugDescription: "Unknown content result type: \(type)"
                )
            }
        }
        
        public func encode(to encoder: any Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            
            switch self {
            case .text(let value):
                try container.encode("text", forKey: .type)
                try container.encode(value, forKey: .value)
            case .structured(let value):
                try container.encode("structured", forKey: .type)
                try container.encode(value, forKey: .value)
            }
        }
    }
    
    public init(toolUseId: String, content: ContentResult? = nil, isError: Bool? = nil) {
        self.toolUseId = toolUseId
        self.content = content
        self.isError = isError
    }
    
    private enum CodingKeys: String, CodingKey {
        case toolUseId = "tool_use_id"
        case content
        case isError = "is_error"
    }
}


// MARK: - AnyCodable

/// A type-erased Codable value for handling dynamic JSON
public struct AnyCodable: Codable, @unchecked Sendable {
    public let value: Any
    
    public init(_ value: Any) {
        self.value = value
    }
    
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        
        if let bool = try? container.decode(Bool.self) {
            value = bool
        } else if let int = try? container.decode(Int.self) {
            value = int
        } else if let double = try? container.decode(Double.self) {
            value = double
        } else if let string = try? container.decode(String.self) {
            value = string
        } else if let array = try? container.decode([AnyCodable].self) {
            value = array.map { $0.value }
        } else if let dictionary = try? container.decode([String: AnyCodable].self) {
            value = dictionary.mapValues { $0.value }
        } else if container.decodeNil() {
            value = NSNull()
        } else {
            throw DecodingError.dataCorruptedError(
                in: container,
                debugDescription: "Unable to decode value"
            )
        }
    }
    
    public func encode(to encoder: any Encoder) throws {
        var container = encoder.singleValueContainer()
        
        switch value {
        case let bool as Bool:
            try container.encode(bool)
        case let int as Int:
            try container.encode(int)
        case let double as Double:
            try container.encode(double)
        case let string as String:
            try container.encode(string)
        case let array as [Any]:
            try container.encode(array.map { AnyCodable($0) })
        case let dictionary as [String: Any]:
            try container.encode(dictionary.mapValues { AnyCodable($0) })
        case is NSNull:
            try container.encodeNil()
        default:
            throw EncodingError.invalidValue(
                value,
                EncodingError.Context(
                    codingPath: container.codingPath,
                    debugDescription: "Unable to encode value of type \(type(of: value))"
                )
            )
        }
    }
}