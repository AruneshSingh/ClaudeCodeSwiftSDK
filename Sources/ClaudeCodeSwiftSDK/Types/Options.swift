// This file was generated by Claude

import Foundation

// MARK: - ClaudeCodeOptions

/// Configuration options for Claude Code SDK
public struct ClaudeCodeOptions: Sendable {
    // Core conversation settings
    public let systemPrompt: String?
    public let appendSystemPrompt: String?
    public let maxTurns: Int?
    
    // Working directory and project context
    public let cwd: URL?  // Changed from workingDirectory to match CLI flag
    public let addDirs: [URL]
    
    // Tool permissions
    public let allowedTools: [String]
    public let disallowedTools: [String]
    public let permissionMode: PermissionMode?
    public let permissionPromptToolName: String?
    
    // Session management
    public let continueConversation: Bool
    public let resume: String?  // Changed from resumeSessionId to match CLI flag
    
    // MCP integration
    public let mcpServers: MCPServersConfig
    
    // Model and settings
    public let model: String?
    public let settings: String?
    
    // Extra CLI args for future flags
    public let extraArgs: [String: String?]
    
    public enum PermissionMode: String, Codable, Sendable {
        case `default` = "default"
        case acceptEdits = "acceptEdits"
        case bypassPermissions = "bypassPermissions"
        case plan = "plan"
    }
    
    
    public init(
        systemPrompt: String? = nil,
        appendSystemPrompt: String? = nil,
        maxTurns: Int? = nil,
        cwd: URL? = nil,
        addDirs: [URL] = [],
        allowedTools: [String] = [],
        disallowedTools: [String] = [],
        permissionMode: PermissionMode? = nil,
        permissionPromptToolName: String? = nil,
        continueConversation: Bool = false,
        resume: String? = nil,
        mcpServers: MCPServersConfig = .dictionary([:]),
        model: String? = nil,
        settings: String? = nil,
        extraArgs: [String: String?] = [:]
    ) {
        self.systemPrompt = systemPrompt
        self.appendSystemPrompt = appendSystemPrompt
        self.maxTurns = maxTurns
        self.cwd = cwd
        self.addDirs = addDirs
        self.allowedTools = allowedTools
        self.disallowedTools = disallowedTools
        self.permissionMode = permissionMode
        self.permissionPromptToolName = permissionPromptToolName
        self.continueConversation = continueConversation
        self.resume = resume
        self.mcpServers = mcpServers
        self.model = model
        self.settings = settings
        self.extraArgs = extraArgs
    }
}

// MARK: - MCP Server Configuration

/// Configuration for MCP servers - supports both dictionary and string/path formats
public enum MCPServersConfig: Sendable {
    case dictionary([String: any MCPServerConfig])
    case string(String)
    case path(URL)
}

/// Protocol for Model Context Protocol server configurations
public protocol MCPServerConfig: Codable, Sendable {}

/// MCP stdio server configuration
public struct McpStdioServerConfig: MCPServerConfig {
    public var type: String? = "stdio"  // Optional for backwards compatibility
    public let command: String
    public let args: [String]?
    public let env: [String: String]?
    
    public init(command: String, args: [String]? = nil, env: [String: String]? = nil) {
        self.command = command
        self.args = args
        self.env = env
    }
}

/// MCP SSE server configuration
public struct McpSSEServerConfig: MCPServerConfig {
    public var type: String = "sse"
    public let url: String
    public let headers: [String: String]?
    
    public init(url: String, headers: [String: String]? = nil) {
        self.url = url
        self.headers = headers
    }
}

/// MCP HTTP server configuration
public struct McpHttpServerConfig: MCPServerConfig {
    public var type: String = "http"
    public let url: String
    public let headers: [String: String]?
    
    public init(url: String, headers: [String: String]? = nil) {
        self.url = url
        self.headers = headers
    }
}

// MARK: - Options Builder

/// Builder for fluent API construction of ClaudeCodeOptions
public class ClaudeCodeOptionsBuilder {
    private var systemPrompt: String?
    private var appendSystemPrompt: String?
    private var maxTurns: Int?
    private var cwd: URL?
    private var addDirs: [URL] = []
    private var allowedTools: [String] = []
    private var disallowedTools: [String] = []
    private var permissionMode: ClaudeCodeOptions.PermissionMode?
    private var permissionPromptToolName: String?
    private var continueConversation: Bool = false
    private var resume: String?
    private var mcpServers: MCPServersConfig = .dictionary([:])
    private var model: String?
    private var settings: String?
    private var extraArgs: [String: String?] = [:]
    
    public init() {}
    
    /// Initialize builder from existing options for updates
    /// - Parameter options: Existing options to use as base
    public init(from options: ClaudeCodeOptions) {
        self.systemPrompt = options.systemPrompt
        self.appendSystemPrompt = options.appendSystemPrompt
        self.maxTurns = options.maxTurns
        self.cwd = options.cwd
        self.addDirs = options.addDirs
        self.allowedTools = options.allowedTools
        self.disallowedTools = options.disallowedTools
        self.permissionMode = options.permissionMode
        self.permissionPromptToolName = options.permissionPromptToolName
        self.continueConversation = options.continueConversation
        self.resume = options.resume
        self.mcpServers = options.mcpServers
        self.model = options.model
        self.settings = options.settings
        self.extraArgs = options.extraArgs
    }
    
    @discardableResult
    public func systemPrompt(_ prompt: String) -> Self {
        self.systemPrompt = prompt
        return self
    }
    
    @discardableResult
    public func appendSystemPrompt(_ prompt: String) -> Self {
        self.appendSystemPrompt = prompt
        return self
    }
    
    @discardableResult
    public func maxTurns(_ turns: Int) -> Self {
        self.maxTurns = turns
        return self
    }
    
    @discardableResult
    public func cwd(_ url: URL) -> Self {
        self.cwd = url
        return self
    }
    
    @discardableResult
    public func addDirs(_ dirs: [URL]) -> Self {
        self.addDirs = dirs
        return self
    }
    
    @discardableResult
    public func allowedTools(_ tools: [String]) -> Self {
        self.allowedTools = tools
        return self
    }
    
    @discardableResult
    public func disallowedTools(_ tools: [String]) -> Self {
        self.disallowedTools = tools
        return self
    }
    
    @discardableResult
    public func permissionMode(_ mode: ClaudeCodeOptions.PermissionMode) -> Self {
        self.permissionMode = mode
        return self
    }
    
    @discardableResult
    public func permissionPromptToolName(_ name: String) -> Self {
        self.permissionPromptToolName = name
        return self
    }
    
    @discardableResult
    public func continueConversation(_ value: Bool) -> Self {
        self.continueConversation = value
        return self
    }
    
    @discardableResult
    public func resume(_ sessionId: String) -> Self {
        self.resume = sessionId
        return self
    }
    
    @discardableResult
    public func mcpServers(_ servers: [String: any MCPServerConfig]) -> Self {
        self.mcpServers = .dictionary(servers)
        return self
    }
    
    @discardableResult
    public func mcpServersFromString(_ jsonString: String) -> Self {
        self.mcpServers = .string(jsonString)
        return self
    }
    
    @discardableResult
    public func mcpServersFromPath(_ path: URL) -> Self {
        self.mcpServers = .path(path)
        return self
    }
    
    @discardableResult
    public func model(_ model: String) -> Self {
        self.model = model
        return self
    }
    
    @discardableResult
    public func settings(_ settings: String) -> Self {
        self.settings = settings
        return self
    }
    
    @discardableResult
    public func extraArgs(_ args: [String: String?]) -> Self {
        self.extraArgs = args
        return self
    }
    
    public func build() -> ClaudeCodeOptions {
        return ClaudeCodeOptions(
            systemPrompt: systemPrompt,
            appendSystemPrompt: appendSystemPrompt,
            maxTurns: maxTurns,
            cwd: cwd,
            addDirs: addDirs,
            allowedTools: allowedTools,
            disallowedTools: disallowedTools,
            permissionMode: permissionMode,
            permissionPromptToolName: permissionPromptToolName,
            continueConversation: continueConversation,
            resume: resume,
            mcpServers: mcpServers,
            model: model,
            settings: settings,
            extraArgs: extraArgs
        )
    }
}