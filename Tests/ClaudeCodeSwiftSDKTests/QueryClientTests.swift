// Generated by Claude

import Testing
import Foundation
@testable import ClaudeCodeSwiftSDK

@Suite("Query Function Tests")
struct QueryFunctionTests {
    
    @Test("Query with single prompt")
    func querySinglePrompt() async throws {
        // Test the query functionality with a mock transport
        // This simulates what the real query function would do
        
        let assistantMessage = Message.assistant(AssistantMessage(
            id: "test-id-1",
            content: [TextBlock(text: "4")], 
            model: "test-model",
            sessionId: "test-session"
        ))
        let resultMessage = Message.result(ResultMessage(
            subtype: "success",
            durationMs: 1000,
            durationApiMs: 800,
            isError: false,
            numTurns: 1,
            sessionId: "test-session"
        ))
        
        // Simulate the query execution
        let mockMessages: [Message] = [assistantMessage, resultMessage]
        var receivedMessages: [Message] = []
        
        // This simulates what query("What is 2+2?") would do internally
        for message in mockMessages {
            receivedMessages.append(message)
        }
        
        #expect(receivedMessages.count == 2)
        
        if case .assistant(let assistantMsg) = receivedMessages[0],
           let textBlock = assistantMsg.content[0] as? TextBlock {
            #expect(textBlock.text == "4")
        } else {
            Issue.record("Expected AssistantMessage with TextBlock containing '4'")
        }
    }
    
    @Test("Query with options")
    func queryWithOptions() async throws {
        // Test that options are properly constructed and validated
        
        let options = ClaudeCodeOptions(
            systemPrompt: "You are helpful",
            maxTurns: 5,
            allowedTools: ["Read", "Write"],
            permissionMode: .acceptEdits
        )
        
        // Verify options are correctly set
        #expect(options.allowedTools == ["Read", "Write"])
        #expect(options.systemPrompt == "You are helpful")
        #expect(options.permissionMode == ClaudeCodeOptions.PermissionMode.acceptEdits)
        #expect(options.maxTurns == 5)
        
        // Simulate what query() would do with these options
        let assistantMessage = Message.assistant(AssistantMessage(
            id: "test-id-2",
            content: [TextBlock(text: "Hello!")], 
            model: "test-model",
            sessionId: "test-session"
        ))
        let mockMessages: [Message] = [assistantMessage]
        
        // In real implementation, these options would be passed to transport
        // Here we just verify the query simulation works
        var receivedMessages: [Message] = []
        for message in mockMessages {
            receivedMessages.append(message)
        }
        
        #expect(receivedMessages.count == 1)
        if case .assistant = receivedMessages[0] {
            // Test passes
        } else {
            Issue.record("Expected AssistantMessage")
        }
    }
    
    @Test("Query with custom working directory", .disabled("Requires mocking"))
    func queryWithCwd() async throws {
        // Test that custom working directory is properly handled
        
        let customPath = URL(fileURLWithPath: "/custom/path")
        let options = ClaudeCodeOptions(cwd: customPath)
        
        #expect(options.cwd == customPath)
        #expect(options.cwd?.path == "/custom/path")
    }
}

@Suite("Claude SDK Client Tests")
struct ClaudeCodeSDKClientTests {
    
    @Test("Client initialization")
    func clientInitialization() {
        let client = ClaudeCodeSDKClient()
        
        // Client should initialize successfully
        // In a real implementation, we might check that it discovers the CLI path
        #expect(client != nil)
    }
    
    @Test("Client query method", .disabled("Requires mocking"))
    func clientQueryMethod() async throws {
        let client = ClaudeCodeSDKClient()
        
        // This would test the client's query method with mocking
        // For now, just verify the client exists
        #expect(client != nil)
    }
}

// MARK: - Helper Extensions for Testing

extension ClaudeSDKError: Equatable {
    public static func == (lhs: ClaudeSDKError, rhs: ClaudeSDKError) -> Bool {
        switch (lhs, rhs) {
        case (.cliNotFound(let lhsPaths), .cliNotFound(let rhsPaths)):
            return lhsPaths == rhsPaths
        case (.cliConnectionError(_), .cliConnectionError(_)):
            return true  // We can't easily compare underlying errors
        case (.processError(let lhsMessage, let lhsCode), .processError(let rhsMessage, let rhsCode)):
            return lhsMessage == rhsMessage && lhsCode == rhsCode
        case (.jsonDecodeError(let lhsLine, _), .jsonDecodeError(let rhsLine, _)):
            return lhsLine == rhsLine  // We can't easily compare underlying errors
        case (.invalidConfiguration(let lhsReason), .invalidConfiguration(let rhsReason)):
            return lhsReason == rhsReason
        default:
            return false
        }
    }
}