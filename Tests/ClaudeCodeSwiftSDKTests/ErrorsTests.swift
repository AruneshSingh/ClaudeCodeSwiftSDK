// Generated by Claude

import Testing
import Foundation
@testable import ClaudeCodeSwiftSDK

@Suite("Error Types Tests")
struct ErrorTypesTests {
    
    @Test("CLI not found error")
    func cliNotFoundError() {
        let searchedPaths = [
            URL(fileURLWithPath: "/usr/local/bin/claude"),
            URL(fileURLWithPath: "/opt/homebrew/bin/claude")
        ]
        let error = ClaudeSDKError.cliNotFound(searchedPaths: searchedPaths)
        
        let description = error.errorDescription ?? ""
        #expect(description.contains("Claude Code CLI not found"))
        #expect(description.contains("/usr/local/bin/claude"))
        #expect(description.contains("/opt/homebrew/bin/claude"))
        
        // Verify it's the correct error type
        if case .cliNotFound(let paths) = error {
            #expect(paths == searchedPaths)
        } else {
            Issue.record("Expected cliNotFound error case")
        }
    }
    
    @Test("CLI connection error")
    func cliConnectionError() {
        let underlyingError = NSError(domain: "TestDomain", code: 1, userInfo: [NSLocalizedDescriptionKey: "Connection failed"])
        let error = ClaudeSDKError.cliConnectionError(underlying: underlyingError)
        
        let description = error.errorDescription ?? ""
        #expect(description.contains("Failed to connect to Claude Code CLI"))
        #expect(description.contains("Connection failed"))
        
        if case .cliConnectionError(let underlying) = error {
            #expect((underlying as NSError).domain == "TestDomain")
        } else {
            Issue.record("Expected cliConnectionError error case")
        }
    }
    
    @Test("Process error with exit code and message")
    func processError() {
        let error = ClaudeSDKError.processError(message: "Process failed", exitCode: 1)
        
        let description = error.errorDescription ?? ""
        #expect(description.contains("Process failed"))
        #expect(description.contains("exit code 1"))
        
        if case .processError(let message, let exitCode) = error {
            #expect(message == "Process failed")
            #expect(exitCode == 1)
        } else {
            Issue.record("Expected processError error case")
        }
    }
    
    @Test("JSON decode error")
    func jsonDecodeError() {
        let invalidLine = "{invalid json}"
        let jsonError = NSError(domain: "JSON", code: 1, userInfo: [NSLocalizedDescriptionKey: "Invalid JSON"])
        let error = ClaudeSDKError.jsonDecodeError(line: invalidLine, error: jsonError)
        
        let description = error.errorDescription ?? ""
        #expect(description.contains("Failed to decode JSON"))
        #expect(description.contains(invalidLine))
        
        if case .jsonDecodeError(let line, let underlyingError) = error {
            #expect(line == invalidLine)
            #expect((underlyingError as NSError).domain == "JSON")
        } else {
            Issue.record("Expected jsonDecodeError error case")
        }
    }
    
    @Test("Invalid configuration error")
    func invalidConfigurationError() {
        let reason = "Missing required parameter"
        let error = ClaudeSDKError.invalidConfiguration(reason: reason)
        
        let description = error.errorDescription ?? ""
        #expect(description.contains("Invalid configuration"))
        #expect(description.contains(reason))
        
        if case .invalidConfiguration(let errorReason) = error {
            #expect(errorReason == reason)
        } else {
            Issue.record("Expected invalidConfiguration error case")
        }
    }
    
    @Test("Error conforms to LocalizedError")
    func errorConformsToLocalizedError() {
        let error = ClaudeSDKError.cliNotFound(searchedPaths: [])
        
        // Should be able to cast to LocalizedError
        let localizedError = error as LocalizedError
        #expect(localizedError.errorDescription != nil)
    }
}