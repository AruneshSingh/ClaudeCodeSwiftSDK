// Generated by Claude

import Testing
@testable import ClaudeCodeSwiftSDK

@Suite("Message Types Tests")
struct MessageTypesTests {
    
    @Test("User message creation")
    func userMessageCreation() {
        let message = UserMessage(content: [TextBlock(text: "Hello, Claude!")], sessionId: "test-session")
        
        if case .blocks(let blocks) = message.content {
            #expect(blocks.count == 1)
            if let textBlock = blocks.first as? TextBlock {
                #expect(textBlock.text == "Hello, Claude!")
            } else {
                Issue.record("Expected TextBlock")
            }
        } else {
            Issue.record("Expected blocks content")
        }
    }
    
    @Test("Assistant message with text content")
    func assistantMessageWithText() {
        let textBlock = TextBlock(text: "Hello, human!")
        let message = AssistantMessage(
            id: "test-id-1",
            content: [textBlock], 
            model: "test-model",
            sessionId: "test-session"
        )
        
        #expect(message.content.count == 1)
        #expect(message.model == "test-model")
        if let textBlock = message.content.first as? TextBlock {
            #expect(textBlock.text == "Hello, human!")
        } else {
            Issue.record("Expected TextBlock")
        }
    }
    
    @Test("Assistant message with thinking content")
    func assistantMessageWithThinking() {
        let thinkingBlock = ThinkingBlock(
            thinking: "I need to consider this carefully...",
            signature: "sig-456"
        )
        let textBlock = TextBlock(text: "Based on my analysis...")
        let message = AssistantMessage(
            id: "test-id-2",
            content: [thinkingBlock, textBlock], 
            model: "claude-3-5-sonnet-20241022",
            sessionId: "test-session"
        )
        
        #expect(message.content.count == 2)
        #expect(message.model == "claude-3-5-sonnet-20241022")
        
        if let thinkingBlock = message.content[0] as? ThinkingBlock {
            #expect(thinkingBlock.thinking == "I need to consider this carefully...")
            #expect(thinkingBlock.signature == "sig-456")
        } else {
            Issue.record("Expected ThinkingBlock as first content")
        }
        
        if let textBlock = message.content[1] as? TextBlock {
            #expect(textBlock.text == "Based on my analysis...")
        } else {
            Issue.record("Expected TextBlock as second content")
        }
    }
    
    @Test("Tool use block creation")
    func toolUseBlockCreation() {
        let block = ToolUseBlock(
            id: "tool-123",
            name: "Read",
            input: ["file_path": AnyCodable("test.txt")]
        )
        
        #expect(block.id == "tool-123")
        #expect(block.name == "Read")
        #expect(block.input["file_path"]?.value as? String == "test.txt")
    }
    
    @Test("Thinking block creation")
    func thinkingBlockCreation() {
        let block = ThinkingBlock(
            thinking: "Let me think about this problem...",
            signature: "signature-123"
        )
        
        #expect(block.thinking == "Let me think about this problem...")
        #expect(block.signature == "signature-123")
    }
    
    @Test("Tool result block creation")
    func toolResultBlockCreation() {
        let block = ToolResultBlock(
            toolUseId: "tool-123",
            content: .text("File contents here"),
            isError: false
        )
        
        #expect(block.toolUseId == "tool-123")
        if case .text(let content) = block.content {
            #expect(content == "File contents here")
        } else {
            Issue.record("Expected text content")
        }
        #expect(block.isError == false)
    }
    
    @Test("Result message creation")
    func resultMessageCreation() {
        let message = ResultMessage(
            subtype: "success",
            durationMs: 1500,
            durationApiMs: 1200,
            isError: false,
            numTurns: 1,
            sessionId: "session-123",
            totalCostUsd: 0.01,
            usage: nil,
            result: nil
        )
        
        #expect(message.subtype == "success")
        #expect(message.totalCostUsd == 0.01)
        #expect(message.sessionId == "session-123")
        #expect(message.numTurns == 1)
        #expect(message.isError == false)
    }
}

@Suite("Options Configuration Tests")
struct OptionsTests {
    
    @Test("Default options")
    func defaultOptions() {
        let options = ClaudeCodeOptions()
        
        #expect(options.allowedTools == [])
        #expect(options.systemPrompt == nil)
        #expect(options.permissionMode == nil)
        #expect(options.continueConversation == false)
        #expect(options.disallowedTools == [])
        #expect(options.maxTurns == nil)
    }
    
    @Test("Options with tools configuration")
    func optionsWithTools() {
        let options = ClaudeCodeOptions(
            allowedTools: ["Read", "Write", "Edit"],
            disallowedTools: ["Bash"]
        )
        
        #expect(options.allowedTools == ["Read", "Write", "Edit"])
        #expect(options.disallowedTools == ["Bash"])
    }
    
    @Test("Options with permission mode")
    func optionsWithPermissionMode() {
        let options = ClaudeCodeOptions(
            permissionMode: .bypassPermissions
        )
        
        #expect(options.permissionMode == .bypassPermissions)
    }
    
    @Test("Options with system prompt")
    func optionsWithSystemPrompt() {
        let options = ClaudeCodeOptions(
            systemPrompt: "You are a helpful assistant.",
            appendSystemPrompt: "Be concise."
        )
        
        #expect(options.systemPrompt == "You are a helpful assistant.")
        #expect(options.appendSystemPrompt == "Be concise.")
    }
    
    @Test("Options with session continuation")
    func optionsWithSessionContinuation() {
        let options = ClaudeCodeOptions(
            continueConversation: true,
            resume: "session-123"
        )
        
        #expect(options.continueConversation == true)
        #expect(options.resume == "session-123")
    }
    
    @Test("Options with model specification")
    func optionsWithModelSpecification() {
        let options = ClaudeCodeOptions(
            permissionPromptToolName: "CustomTool",
            model: "claude-3-5-sonnet-20241022"
        )
        
        #expect(options.model == "claude-3-5-sonnet-20241022")
        #expect(options.permissionPromptToolName == "CustomTool")
    }
}